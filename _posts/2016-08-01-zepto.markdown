---
layout: post
title: "zepto源码阅读"
date: 2016-08-01 08:27:00
categories: programming
---

zepto源码的笔记统一挪到这里啦。

## $.on $.one

用on的话，会增量的加事件监听，在redux这种反复subscribe的情景下，很容易出bug。
因此，用one是很好的选择。

来看看.one是如何实现的:

```javascript
// one
$.fn.one = function(event, selector, data, callback) {
    return this.on(event, selector, data, callback, 1)
}
// one -> on
$.fn.on = function(event, selector, data, callback, one){
   ...
   return $this.each(function(_, element) {
      if (one) autoRemove = function(e){
         remove(element, e.type, callback)
         return callback.apply(this, arguments)
      }
      add(element, event, callback, data, selector, delegator || autoRemove)
      ...
   }
}
// on -> add
function add(element, events, fn, data, selector, delegator, capture){
    var callback  = delegator || fn
    handler.proxy = function(e){
        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))
    }
    element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
}
```

所以就是一触发，立马remove这个监听器，从而实现只触发一次。


另一个问题是，.off是否会把所有.on添加的listener都删除掉？
答案是能删掉，来看看实现吧：


## $.data

我们知道，$.data可以存任意object，这是如何实现的？

```javascript
var data = {}, dataAttr = $.fn.data, camelize = $.camelCase,
    exp = $.expando = 'Zepto' + (+new Date()), emptyArray = [];
  
// Store value under camelized key on node
function setData(node, name, value) {
    var id = node[exp] || (node[exp] = ++$.uuid),
      store = data[id] || (data[id] = attributeData(node))
    if (name !== undefined) store[camelize(name)] = value
    return store
}
```

存到内存里的一个变量data = {}里啦！ id由`$.uuid`生成，当然任意咯。

## ajax

`INVALID_STATE_ERR: DOM Exception 11`

这是个XMLHttpRequest对象抛出的异常，如果`xhr.open`前调用了xhr.withCredentials就会出问题。

详见这个issue: [issue 921](https://github.com/madrobby/zepto/issues/921)