---
layout: post
title: "zepto源码阅读"
date: 2016-08-01 08:27:00
categories: programming
excerpt: zepto源码的笔记统一挪到这里啦
---

## $.on $.one

用on的话，会增量的加事件监听，在redux这种反复subscribe的情景下，很容易出bug。
因此，用one是很好的选择。

来看看.one是如何实现的:

```javascript
// one
$.fn.one = function(event, selector, data, callback) {
    return this.on(event, selector, data, callback, 1)
}
// one -> on
$.fn.on = function(event, selector, data, callback, one){
   ...
   return $this.each(function(_, element) {
      if (one) autoRemove = function(e){
         remove(element, e.type, callback)
         return callback.apply(this, arguments)
      }
      add(element, event, callback, data, selector, delegator || autoRemove)
      ...
   }
}
// on -> add
function add(element, events, fn, data, selector, delegator, capture){
    var callback  = delegator || fn
    handler.proxy = function(e){
        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))
    }
    element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
}
```

所以就是一触发，立马remove这个监听器，从而实现只触发一次。


另一个问题是，.off是否会把所有.on添加的listener都删除掉？
答案是能删掉，来看看实现吧：


## $.data

我们知道，$.data可以存任意object，这是如何实现的？

```javascript
var data = {}, dataAttr = $.fn.data, camelize = $.camelCase,
    exp = $.expando = 'Zepto' + (+new Date()), emptyArray = [];
  
// Store value under camelized key on node
function setData(node, name, value) {
    var id = node[exp] || (node[exp] = ++$.uuid),
      store = data[id] || (data[id] = attributeData(node))
    if (name !== undefined) store[camelize(name)] = value
    return store
}
```

存到内存里的一个变量data = {}里啦！ id由`$.uuid`生成，当然任意咯。

## ajax

`INVALID_STATE_ERR: DOM Exception 11`

这是个XMLHttpRequest对象抛出的异常，如果`xhr.open`前调用了xhr.withCredentials就会出问题。

详见这个issue: [zepto issue 921](https://github.com/madrobby/zepto/issues/921)

## tap

先说结论，tap存在点透问题，有没有触发路径呢？
顶部元素tap后隐藏，底部元素的click也会触发。（及时顶底元素不构成父子关系）

复现情景：

```html
<div class='bottom'></div>
<div class='top'></div>
<script>
    $('.top').on('tap', function(e) {
        $(this).hide();
    });
    $('.bottom').on('click', function(e) {
        alert('bottom clicked, target: ' + $(e.target).attr('class'));
    });
</script>
```

究其原因，touch库是在document上监听touchstart, touchmove, touchend实现的。
这里说细一点，底部元素click事件触发时还会取到target就是底部元素，这就非常不对了。

看下源码，最后发送的tap事件确实是由touchstart元素发射的：`var event = $.Event('tap'); touch.el.trigger(event);`. 

这里的问题在哪里呢？

打断点发现，点击了顶层元素后，touchstart, touchend监听器监听到了两次，两次直接间隔小于250ms，所以会触发doubleTap。
这是因为鼠标调试的原因，手机上测试不会出现。

然后考虑为何出现点透，click有300ms的延时，300ms到来时，顶层元素已经隐藏了，浏览器只能看现在最顶元素是谁，发现是刚才的底元素，于是发射了底元素的click事件。

要解决这个问题，在于所有click事件都不要等300ms，大家都立马发射click事件。
具体来说，把目标元素的click事件监听器直接取消掉，只留touch监听器。
