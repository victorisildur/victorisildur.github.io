---
layout: post
title: "莱昂式unix源码阅读1: boot与进程"
date: 2015-10-31 08:26:00
categories: os
---

## 预备知识

#PDP11硬件

16位，寻址能力2^16B= 64KB。程序虚地址空间被分为8页，每页8KB，一页又被分为128块。
而其支持的最大物理内存有256KB，所以要进行虚拟页地址-->实际物理地址的映射。

映射是由8对内核par+pdr和8对用户par+pdr组成的。
mmu off时，虚地址空间前7页做不变映射，第八页映射到物理地址最高64K。
mmu on时，映射靠的是内核态par，书中称内核态段地址寄存器，存放在KISA处。
和用户态段地址寄存器，存放在UISA处。

# 栈

PDP11的栈是向下增长的。栈顶朝下。
调用函数时，r5,r4,r3,r2依次入栈。
压r5的时候注意，这里压进去的是上一次函数调用的r5。压完之后，把sp付给r5。
r5值变成新的“过程底”。这么叫是因为r5当前值总代表当前过程在栈里的底部。

函数返回时，用r5定位，恢复r4,r2,r4。这里r5起到的作用是指明一个过程在栈里的底。
然后`mov r5, sp`，这样栈相当于把整个过程在栈里保存的东西都弹完了。
最后`mov (sp)+, r5`，r5恢复成caller在栈里的“过程底”。

这部分图解见[cszhao讲解unix栈](http://blog.csdn.net/cszhao1980/article/details/7572908)

# PPDA
boot时，我们把内核态段寄存器的前6对页寄存器映射做了不变映射。
第七对页寄存器映射到_end后第一个块。
_u也被编址到140000，即虚拟地址第七页页首。

u占用了第七页的低地址1024B，高地址被stack占用。

这中间什么关系！？什么时候做的虚地址到物理地址映射的？和内核态段寄存器有毛关系？

cszhao的说法是，当分配了一个新的kernel page #6，就诞生了一个新的进程。
具体来说，`newproc()`时，会尝试为新进程分配“私有空间”：

```c
n = rip->p_size;
a2 = malloc(coremap, n);
if(a2 != NULL) {
    rpp->p_addr = a2; //设置新进程的“私有空间”地址，新进程诞生！
    while(n--)
        copyseg(a1++,a2++);
}
```

# main

1560行设置UISA:

```c
i = *ka6 + USIZE;   //PPDA后第一个Block地址
for(;;) {
    UISA->r[0] = i;
    ...
    clearseg(i);
}
```

# 进程切换
进程不独享代码，我们无法根据当前执行的代码确定哪个进程处于active状态。
那么该怎么办呢？我们应该通过进程私有的东西来确定。这就是进程的“私有空间”-》ppda。
即kernel page #6，也就是ppda所在的page。

我们通过KISA6来确定active进程，kisa6指向那个进程的“私有空间”，则该进程就是active进程。

切换之前，首先保存当前进程的信息，到当前进程的ppda，这是`savu()`完成的。

切换是由retu(rp->p_addr)完成的，参数是要被切进来的进程的ppda地起始block号！

```asm
0740  _retu:
0741  bis $340, PS
0742  mov (sp)+, r1   // return addr -> r1
0743  mov (sp),  KISA6  //参数-->KISA，kernal page #6映射到新进程的ppda拉！
0744  mov $_u, r0         // u.u_rsav
0745  1:
0746  mov (r0)+, sp     //用u恢复sp，这里是去(140000)取内容哦. 还是不懂，这和kisa6如何联系起来的？
                        //终于知道了！因为有mmu! mmu on之后，汇编写得都是虚地址。mmu自动根据内核态段寄存器去做映射。
0747  mov (r0)+, r5
0748  bic $340, PS
0749  jmp (r1)
```

# 未完待续

还缺：用户态、核心态进程是如何设置的。用户态进程estabur过程。