---
layout: post
title: "react技术栈"
date: 2016-08-17 08:27:00
categories: programming
excerpt: "react redux react-redux，用组件代替display logic"
---

## connect()

connect是Component的子类，其主要功能是state到react component强映射。
看下源码，其实也是靠脏值检测：

```javascript
componentDidMount() {
    this.trySubscribe()
}
trySubscribe() {
    if (shouldSubscribe && !this.unsubscribe) {
	this.unsubscribe = this.store.subscribe(this.handleChange.bind(this))
	this.handleChange()
    }
}
handleChange() {
    //...
    const storeState = this.store.getState()
    const prevStoreState = this.state.storeState
    if (pure && prevStoreState === storeState) {
	return
    }
    //...
    this.hasStoreStateChanged = true
    this.setState({ storeState })
}
shouldComponentUpdate() {
    return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged
}
```

so, 其实也是subscribe，检测到state脏了，就把`this.hasStoreStateChanged`置位，然后`shouldComputeUpdate()`就会返回true，react component就会更新一波。
至于shouldComputeUpdate何时调用，就要去看react源码了。
文档里写的是new props/states被接收到的时候，会调用`shouldComponentUpdate()`。


## JSX

为什么要用jsx来写组件呢？
首先要明白原来我们怎么写组件：display logic + template。
我们自己的代码中，经常发现一个view的display logic非常长，想想网关的ToolbarView，疯狂的多的点击事件、渲染位置、回调然后渲染位置。
写出来的代码很难直接和"view"联系到一起。


我们来看一个component的例子：

```javascript
// Input (JSX):
var person = <Person name={window.isLoggedIn ? window.name : ''} />;
// Output (JS):
var person = React.createElement(
    Person,
    {name: window.isLoggedIn ? window.name : ''}
);
```

一般的，我们用`React.createClass()`或`class MyCompnent extends React.Component`来创建组件。
组件可以看做一个状态机。
组件的交互是通过事件代理完成的。所有事件都被顶层元素监听、分发处理。
facebook宣称这样更高效，参加这个blog[David Walsh\'s excellent blog post](https://davidwalsh.name/event-delegate)。

## 组件的组合

```javascript
var Avatar = React.createClass({
    render: function() {
       return (
          <div>
	     <PagePic name={this.props.name} />
     	     <PageLink name={this.props.name} />
	  </div>
       );
    }
});
```

这里有Owner的概念，组件Avatar是组件PagePic和PageLink的Owner，因为后两者的props是Avatar来置的。

## Children Reconciliation

这里没看懂什么意思，为什么要key?
有key时reconcile行为和没key时有何不同？没写明白。

## 组件生命周期

* Mounting
* Updating
* Unmounting

具体怎么调用，还要看源码，暂且不管。

## 开发环境

jsx的预编译用babel-preset-react完成，考虑es2015的话，要install的模块有：

* react react-dom
* webpack babel-loader
* babel-core babel-preset-es2015 babel-preset-react

webpack中，loaders这样配置即可：

```javascript
test: /.jsx?$/,
loader: 'babel-loader',
exclude: /node_modules/,
query: {
    presets: ['es2015', 'react']
}
```

## STATE vs PROPS

什么时候用props, 什么时候用state?
写FriendList时，最开始是把friendInfos当做props传给控件的，然后我发现自己不知道该如何更新FriendList。
正确的做法是把可能引起UI更新的数据放state里。

注意，用`class MyComponent extends React.Component`语法时，不能使用`getInitialState()`方法。
用Constructor代替即可：

```javascript
class MyComponent extends React.Component {
   constructor (props, context) {
      super (props, context);
      this.state = {init: true, ...};
   }
}
```

然后，在`componentDidMount()`里请求服务器，并在成功回调里`setState()`，这样render就会被调用。
记住，react总表现的好像清空组件，然后全部重新渲染一样！
这是它的设计目标！

## 组件件通信

做一个简单的router需求，依赖于组件间通信。
react官方推荐的组件间通信方式是Flux，由于redux更流行，我们来看看redux怎么做。

redux首先引入container和presentational component分离的概念。
[smart-and-dumb-components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.jtmy45bvz)。
简单提取下中心思想：

* presentational component: 只关心view，不关心action。不关心数据变化，只有ui state。
* container: 只关心work logic。

## $.extend引发的Bug

在我的代码里，reducer这样写：

```javascript
case 'set_friends':
   return $.extend(state, action.friends);
```

然后就出bug了，dispatch之后组件不会更新！
是，是，这个不是纯函数，但已知dispatch的核心代码是这一句：

```javascript
currentState = currentReducer(currentState, action);
```

看起来state的值也确实不同了啊，没什么副作用啊？

这里，秘密在于`connect()`的实现：

```javascript
if (pure && prevStoreState === storeState)
```

这里因为不是纯函数，===为真！ state仍是原来那个对象（虽然值不同了）。
所以不会更新啦！

## React-Router

用这个的原意是想实现 `#/`是列表页，`#/detail`是详情页这样的功能。
但他的api是`browserHistory.push('detail')`之后会跳到`xx.qq.com/detail`，毛都不会发生。

或者`browserHistory.push(location.pathname + '#/detail')`，url会正确变成`xx.qq.com/iot/mobile/demo.html#/detail`，但是组件不会正常切换。

简直难用啊，到底是hash里维护路径还是怎样，orz
