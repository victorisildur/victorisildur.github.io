---
layout: post
title: "unix环境高级编程6: io、重定向、管道"
date: 2015-11-25 11:22:00
categories: os
---

## 一些概念

1. io重定向是谁完成的？
是shell! 不是程序！ 程序总是指明了要向stdout输出。
shell在未通知程序的情况下偷偷换掉了。
2. 文件描述符是什么？
是进程打开文件数组的索引号。
进程打开文件的时候，为此文件分配的fd总是数组中最低可用位置的索引。

## 如何将stdin定向到文件

第一种思路非常简单，利用lowest available fd原则，我们可以先关掉fd0的文件，让fd0空闲。
然后再打开一个文件。
这样新打开的文件自然会占用fd0.

```c
#include <stdio.h>
#include <fcntl.h>

main()
{
    int fd;
    char line[100];
    
    fgets(line, 100, stdin);
    printf("%s", line);

    close(0);
    fd = open("/etc/passwd", O_RDONLY);
    if (fd != 0) {
        fprintf(stderr, "could not open data as fd 0\n");
        exit(1);
    }

    fgets(line, 100, stdin);
    printf("%s", line);
}
```

第二种方法是open-close-dup-close法。先打开文件，再复制到fd0上去。
我们看看代码：

```c
main()
{
    int fd;
    int newfd;
    char line[100];

    fgets(line, 100, stdin); printf("%s", line);
    fgets(line, 100, stdin); printf("%s", line);
    fgets(line, 100, stdin); printf("%s", line);

    fd = open("/etc/passwd", O_RDONLY);
    close(0);
    newfd = dup(fd);

    if (newfd != 0) {
        fprintf(stderr, "could not dup fd to 0");
        exit(1);
    }
    close(fd);

    fgets(line, 100, stdin); printf("%s", line);
    fgets(line, 100, stdin); printf("%s", line);
    fgets(line, 100, stdin); printf("%s", line);
}
```

值得注意的是，`close(0)`和`dup(fd)`这两步可以合成一个系统调用`dup2(fd,0)`.
也就是说，open-dup2-close就行了！

## shell是如何重定向子进程io的？

关键在于fork和exec之间的间隙！fork之后，子进程仍在运行shell程序。
我们应注意到，exec之后，进程的属性和进程的所有连接不会变化！
所以只要在exec之前把fd0,1,2该换的换掉就好了。

## 管道

函数原型：

```c
#include <unistd.h>
result = pipe(int array[2]);
```

这个函数打开了两个fd。第一个用于读，第二个用于写。
fd都在一个进程里，管道有什么用呢？
所以，管道主要用于父子进程间的通信。
子进程和父进程共享了管道，一个读一个写，完成通信。