---
layout: post
title: "unix环境高级编程2: who与cp"
date: 2015-11-08 10:27:00
categories: os
---

郁闷，github contributions老是没有，原来是没config email的原因

## who
今天来看看who与的实现。

# 如何用man看who的实现

我们`man who`一下，可以看到说明，who就是收集了`/var/run/utmpx`这个文件的信息。
`SEE ALSO`里有写`utmpx(5)`，意思是utmp在man的第五部分。

我们继续`man 5 utmpx`，发现这是个数据库，和老式的utmp不一样的，多维护了一些诸如进程id，退出状态之类的信息。
不过也是兼容的，当用户对utmpx操作，系统会自动对utmp做同步。
想要调用读utmpx，就要`#include <utmpx.h>`。

# utmpx.h

utmpx.h里定义了一些变量，函数，可能对我们有用：

```c
#define UTMPX_FILE "/var/run/utmpx"
struct utmpx {
    char ut_user[_UTX_USERSIZE];
    struct timeval ut_tv;
    ...
}
```

# 第一版：直接读文件

从直观猜测，`/var/run/utmpx`这个文件就是一堆utmpx的序列。
读文件然后解析就好：

```c
#include <utmpx.h>
#include <stdio.h>
#include <fcntl.h>

int main()
{
    struct utmpx record;
    int fd;
    int reclen = sizeof(record);
    if ( (fd=open(UTMPX_FILE,O_RDONLY)) == -1) {
        perror(UTMPX_FILE);
        exit(1);
    }
    while (read(fd, &record, reclen) == reclen)
        show_info(&record);
    close(fd);
    return 0;
}
show_info(struct utmpx * utbufp)
{
    printf("%s\n", utbufp->ut_user);
}
```

然而效果并非如我们所想，只打印出了一行有内容，其他都是空行。
这说明文件并不简单组织的，我们要另想办法。

# 第二版: 用库函数

仔细读utmpx.h，里面有很多getter,setter，为什么不用呢？
我们用里面的`getutxent()`，也就是get utmpx entry来重写who:

```c
int main()
{
    struct utmpx * records;
    while ( (records = getutxent()) != NULL)
        show_info(records);
    return 0;
}

void show_info(struct utmpx * utbufp)
{
    printf("%s ", utbufp->ut_user);
    printf("%s ", utbufp->ut_id);
    printf("%s \n", utbufp->ut_host);
}
```

well done!

## cp

首先搞清上次写more没搞清的File descriptor。
这是个非负整数，可以理解为进程打开文件的索引。
习惯上，0是stdin，1是stdout，2是stderr。

#cp流程

creat和write系统调用的形式是：

```c
#include <fcntl.h>
int fd = creat(char * filename, mode_t mode);

#include <unistd.h>
/* buf内存数据，amt要写的字节数, result要写入成功的字节数 */
ssize_t result = write(int fd, void* buf, size_t amt);
```

cp的流程应该是：读模式打开src,写模式打开dst，读src到buf，写buf到dst。
直到遇到src文件的eof，说明cp完毕了。最后close源文件和目的文件。

代码见[cp01.c](https://github.com/victorisildur/UNIX/blob/master/APUE/cp/cp01.c)

#缓冲
BUFFERSIZE对程序运行时间有影响吗？有！而且很大。
这是因为系统调用要切到内核态，保存用户态栈、寄存器。切内核态栈、寄存器。然后再恢复回去。

一般来说，我们希望尽量减少系统调用的次数，用sys call的时候，容量参数填的越大越好。

## 错误处理

`errno.h`里的全局变量`errno`指示了出错原因：

```c
#define EPERM  1   /*operation not permitted*/
#define ENOENT 2   /*no entry: no such file or directory*/
#define ESRCH  3   /*no such process*/
#define EINTR  4   /*interrupted sys call*/
#define EIO    5   /*io error*/
```

`perror()`这个函数，就是自动的去读`errno`，然后打印错误信息。
前面代码也用到过，非常方便。