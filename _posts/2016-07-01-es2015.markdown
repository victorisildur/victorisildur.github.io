---
layout: post
title: "全面拥抱es2015: 从页面，后台到测试"
date: 2016-07-01 08:27:00
categories: programming
excerpt: 面向未来编程，从babel es2015开始
---

## es6 测试

expect库是一个有力的测试工具，我们期望如下代码能够node test.js以下就能跑起来：

```javascript
import expect from 'expect';
import {byteToIntArr} from './protobuf';

const byteArr = {
    '0': 8, '1': 48, '3': 0
    };

expect(
    byteToIntArr(byteArr)
    ).toEqual(48);

console.log('Tests passed!');
```

然而，直接node运行es6代码会报报错'unexpected reseed word import', 该如何让这段测试用例跑起来呢？
答案是babel-cli。

安装之后，运行`babel-node --presets es2015 test.js`.
至于为什么一定要--presets，有空再说，先上车！

## Object.assign

Object.assign(target, ...sources)

把多个源的可枚举属性copy到目标对象上去。
redux里用于在不改变原state的情况下，在reducer里返回新的state。

但为什么要这么做？

> Because reducers are just functions, you can control the order in which they are called, pass additional data, or even make reusable reducers for common tasks such as pagination.

简单的说，纯函数可以毫无顾忌的去组合，而不用担心副作用。
其他几条还需要在实践中体会。

实际使用中, Object.assign会报错undefined is not a function.
这是因为babel-loader只转es6语法，不转es6标准库。

解决方法有两种，
一是`import babel-polyfill`，但这个很大，不压缩有200k。
二是$.extend，功能是一样的，推荐。

## $.extend的实现

先到这里顺便写下$.extend的实现，基本思想就是递归向下，直到遇到基础类型。

代码如下：

```javascript
  function extend(target, source, deep) {
    for (key in source)
      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key]))
          target[key] = {}
        if (isArray(source[key]) && !isArray(target[key]))
          target[key] = []
        extend(target[key], source[key], deep)
      }
      else if (source[key] !== undefined) target[key] = source[key]
  }
```

非深拷贝没什么好讲的，直接key覆盖。
深拷贝需要递归到底，因为基础类型不是引用的，所以=就是深拷贝。

这里另一个要注意的地方是，isPlainObj(obj)，则obj的复制是引用复制。
具体来讲：

```
  function isObject(obj)     { return type(obj) == "object" }
  function isPlainObject(obj) {
    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
  }
```

## Async Action

什么是异步动作？简单的说，我希望在这个瞬间dispatch(actionA), 然而actionA实际要经历网络请求，
真正的action对象要在未来某个时间点才会抛出来。

要实现这个功能，不用middleWare的话，应该这样写：

```javascript
$.ajax('aa.com/post/a', {
    success: function(data) {
        store.dispatch({
            type: 'actionA',
            data: data
        })
    }
});
```

这样显然是冗余代码，可以这样thunk一下：

```javascript
function asyncActionA() {
    return function(dispatch) {
        dispatch({action: 'BEGIN_REQUEST'});
        return fetch('aa.com/post/a')
               .then(response => response.json())
               .then(json => dispatch({type: 'END_REQUEST', data: json)
    }
    
}
```

thunk的意思就是把执行推后，这样就可以在瞬时这样调用了：

```javascript
store.dispatch(asyncActionA());
```

## 箭头函数

在看redux-thunk时遇到这样的级联箭头：

```javascript
function createThunkMiddleware(extraArgument) {
    return ({ dispatch, getState }) => next => action => {
        if (typeof action === 'function') {
            return action(dispatch, getState, extraArgument);
        }
        return next(action);
    };
}
```

搜了下没搜到，不知道什么意思

## $.on

`$.fn.on(event, selector, callback)` 最终调用的时候，
callback.apply(element)，所以this是element

然后，$.fn.attr之类的函数，this是如何的？

```javascript
$ = function(selector, context) {
    return zepto.init(selector, context);
}

zepto.init = function(selector) {
    var dom = zepto.qsa(document, selector);
    return zepto.Z(dom, context);
}

zepto.Z = function(dom, selector) {
    return new Z(dom, selector);
}

function Z(dom, selector) {
    var i, len = dom ? dom.length : 0;
    for (i=0; i<len; i++) this[i] = dom[i];
    this.length = len;
    this.selector = selector || '';
}
```

所以你看，$.fn被调用时，this也并不是dom，而是一个Z的实例。
`Z[0] = dom[0], Z[1] = dom[1]`。
好吧，这不能解释plugin里面this就是dom?? 少年你还有路要走。

## generator

要理解generator，首先要理解Iterator.
在js里，Iterator对象必须有一个next方法，它返回一个`{value, done}`对象。

我们来看一个Iterator生成器：

```javascript
function makeIterator(array) {
   var index = 0;
   return {
       next: function() {
           return index < array.length ?
	       {value: array[index++], done: false} :
	       {done: true};
       }
   }
}
```

然而，这样要仔细的去维护iterator的内部状态（这都懒得做了吗。。。现在的高级语言都怎么了。。。）。
于是诞生了generator，它满足两个条件：

* 含yield表达式
* 用 function * 声明

看个例子：

```javascript
function * idMake() {
   var index = 0;
   while(true) {
       yield index ++;
   }
}
```

yield的作用是暂停这个generator的状态，yield后面的表达式值会被塞入`next()`方法返回值的`value`字段。
generator的暂停态直到下一次调用`caller.next()`结束。
实际上，当执行yield语句时，也返回了{done: false}字段。
要想返回{done: true}，让generator resume后执行到底，不再yield就行。

我们可以用generator重构之前的array iterator:

```javascript
function * makeIterator(array) {
   var index = 0;
   while (index < array.length) {
      yield array[index++];
   }
}
```

是不是简单清晰很多！