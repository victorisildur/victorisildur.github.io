---
layout: post
title: "js细节汇总"
date: 2016-03-12 08:27:00
categories: programming
excerpt: javascript报错，事件，原生api
---

## undefined

```javascript
if (aaa === undefined)
    //如果aaa是Undefined，会抛出ReferenceError!
```

```javascript
JSON.parse(undefined)
//抛异常unexpected token 'u'

JSON.parse({})
//抛异常unexpected token 'o'
```

## array
array.prototype.splice会删掉原数组内容！

## event
长按时，touchend事件不触发！
这是因为中间触发了touchmove事件，解决办法是touchmove的响应函数中调用`e.preventDefault()`即可。
错了！这是个bug！解决办法是touchstart中调用`e.preventDefault()`!

## $.fn.remove
今天遇到一个$.fn.remove失效的问题，暂时不知道什么原因，因为没有任何报错。
而且之前cached widget全部调用过一遍remove，需要仔细观察前一次的后果，然后分析。

## touch
今天看了下zepto的touch.js，swipe事件其实就是touchstart和touchend之间offset>30，就认为是swipe

## JSON
JSON.parse()如果参数已经是一个javascript object,  会抛unexpected token 'o'的异常

## querySelectorAll
返回是NodeList对象。
NodeList.length, NodeList.item(idx)。

NodeList里的值是Element对象。
这个属性比较多，还不熟悉。

## NaN

一个数除以0的结果是NaN

## defer 与 async

defer是说dom解析完后再去执行，顺序可以保证。
async是说dom解析完后再去执行，加载完立马执行，顺序无保证。

用defer发现要等app_cache里的内容，首屏是快了，js还是有点慢。
所以还是要用async，只要想办法确保顺序就行了。
由于我们用的是webpack打包过的，只有一个async文件，所以也是没有问题的。

## 事件代理

由于listener是加在父元素上的，所以e.stopPropagation()是没有用的。

## Int精度问题

js中，所有数字都是64位浮点数，所以最大精确到pow(2, 53) - 1 = 9007199254740991。

处理时，用big-integer库。

## TypeError: 没有isDefaultPrevented属性

分组管理focusout处理时遇到的，原因是trigger事件时，事件名称是空的

## 限流函数

有时我们不希望函数被频繁执行，而是希望其最多久执行一次，这时就需要"限流"

```javascript
/* @func: 输入一个func，返回的函数最短wait时间调用一次，最长mustRun时间调用一次
 * @params:
 *      func{Function}
 *      wait{int}: wait in ms
 *      mustRun{int}: mustRun in ms
 */
function throttle (func, wait, mustRun) {
    var timeout,
        startTime = new Date();

    return function () {
        var context = this,
            args = arguments,
            curTime = new Date();

        window.clearTimeout(timeout);

        if (curTime - startTime > mustRun) {
            func.apply(context, args);
        } else {
            window.setTimeout(func, wait);
        }
    };
}
```

## canvas

`canvas.width`相当于svg的viewBox，画布大小。
为了canvas在高分辨率屏幕上不模糊，采用css宽高100%，画布宽高乘以dpr的做法。

## Array.map部分不返回

貌似没有办法，只能.filter().map()这样组合实现。

## $.ajax跨域

1.a.com和2.a.com是不同的host，数据能取到，但因为Header里
`Access-Control-Allow-Origin: http://qzs.qq.com`

这里内容有点多，详见[mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)

## 空字符串

这个涉及到类型转换，js期望使用字符串，会把对象类型转为字符串，如 n + 'aa'的情况。
js期望使用数字，会把非数字转为数字，如 '7' * '4' 的情况。
js期望使用布尔，会自动转bool，如 if () 的情况。

对字符串来说，空字符串转化为：

* 数字： 0
* 布尔： false

## 非函数返回

在script标签里直接return, 不使用function包裹，是非法的，会报Illegal return statement.

## 如何让光标移到input

```javascript
$('input').trigger('focus');
```

但是`trigger('click')`为什么不行呢？

## 变量hoist

如果函数内部重复定义var，如下面例子：

```javascript
function (a) {
   if (a) {
   }
   var a;
}
```

虽然a是形参，但由于`var a`的存在，这个context下首先访问到的值是undefined。

## location.href

首先区别`window.location`, `window.location.href`, `document.location`:

1. window.location和document.location是同一个对象。
2. 对window.location.href赋值和对window.location赋值是等效的。具体原理不知。


然后是奇怪的地方，`location.href`如果赋值为一个普通字符串，浏览器会把它当做相对路径处理。
只有赋值为一个'http://|https://|//'开头的字符串，浏览器才会把它当做绝对路径处理。

在实际过程中，发现'http://'开头也不好使了，用'//'实现了想要的'跳转到相同协议路径'的功能。

## Number

Number.toString和Number.parseInt可以方便的完成进制转换：

```javascript
// Number.prototype.toString([radix])
var n = 43;
n.toString(16) === '2b';
// Number.parseInt(string[, radix])
var n1 = '110';
Number.parseInt(n1, 2) === 6
Number.parseInt(n1, 10) === 110
```

## DOM Exception 18

An attempt was made to break through the security policy of the user agent

iOS 10不能用js去动cookie!
