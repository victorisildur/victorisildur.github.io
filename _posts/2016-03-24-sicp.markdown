---
layout: post
title: "计算机程序的构造和解释"
date: 2016-03-24 09:27:00
categories: programming
---

# 为什么读这本书

保证每种小型结构的正确性，利用有价值的的"组织技术"，将这些结构组合成更大的结构！

btw，lisp贯穿全书，这对玩溜emacs很有用

# 组合式

```lisp
  (+    137     349)
;;运算符       运算对象
```

将由运算符所刻画的"过程"，应用于有关的"实际参数"，就能得到组合式的值。

注意，这个过程是递归的，应进一步描述为：

1. 求该组合式的各个子表达式
2. 将最左子表达式（运算符）的值的那个过程，应用于响应的实际参数

# 定义

```lisp
(define pi 3.14)
```

定义为名字关联相应的值，是一种首先的抽象手段。

# 复合过程

```lisp
(define (square x) (* x x))
;; (define (<name> <formal parameters>) <body>)

(define (sum-of-squares x y)
    (+ (square x) (square y))
)
```

复合过程的使用与基本过程完全一样，仅从上面sum-of-square的定义，看不出square是一个基本过程（像+,-,*一样），还是一个复合过程。

复合过程在应用时，代换就是将过程体中的每个形式参数，用相应的实际参数代换后，对这一过程体求值。
值得注意的是，还可以先不求值做实参代换，而是用运算对象表达式去代换形式参数，直到得到一个只包含基本运算符的表达式。
最后再去执行求值。

前一种，"完全展开后归约"的求值模型成为"正则序求值"；后一种，"先求值参数而后应用"，称为"应用序求值"。

# 高阶过程

如果将过程限制为只能以数作为参数，那也会严重限制我们建立抽象的能力。
如果过程能以过程为参数，就称为"高阶过程"。

lambda就是匿名函数，python里直接叫这个，js里用的不要太多。

# let

js6里的let，竟已经1958就有了，天。。。

let其实就是function内的变量：约束变量。函数里用着方便，函数外看不见。